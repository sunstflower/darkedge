name: Convert Issue to Blog Post

# - 当 Issue 被打开、编辑、标记或取消标记时
# - 当 Issue 被关闭或重新打开时
# - 当工作流被手动触发时

on:
  issues:
    types: [opened, edited, labeled, unlabeled, closed, reopened]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process'
        required: true
        type: number

jobs:
  convert-issue:
    # 只处理带有 'publish' 标签的 Issues 或手动触发
    if: |
      (github.event_name == 'workflow_dispatch') || 
      (github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'publish'))
    runs-on: ubuntu-latest
    permissions:
      contents: write # 需要写入权限来提交文件
      issues: write # 需要写入 Issues 权限以添加评论

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get issue details
        id: get-issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issueNumber = ${{ github.event.inputs.issue_number || github.event.issue.number }};

            try {
              const { data: issue } = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber
              });
              
              // 设置环境变量用于后续步骤
              core.exportVariable('ISSUE_NUMBER', issue.number);
              core.exportVariable('ISSUE_TITLE', issue.title);
              
              // 提取内容，处理frontmatter
              let content = issue.body || '';
              let frontmatter = {};
              let slug = '';
              
              // 尝试从Issue body中提取frontmatter
              const frontmatterMatch = content.match(/^---\s*([\s\S]*?)\s*---\s*([\s\S]*)$/);
              if (frontmatterMatch) {
                try {
                  const yaml = require('js-yaml');
                  frontmatter = yaml.load(frontmatterMatch[1]) || {};
                  content = frontmatterMatch[2].trim();
                  console.log('Found frontmatter in issue body');
                } catch (error) {
                  console.error('Error parsing frontmatter:', error);
                }
              }
              
              // 生成slug
              slug = frontmatter.slug || issue.title
                .toLowerCase()
                .replace(/^\[post\]:\s*/i, '')
                .replace(/[^\w\s-]/g, '')
                .replace(/\s+/g, '-')
                .replace(/-+/g, '-')
                .trim();
              
              core.exportVariable('SLUG', slug);
              
              // 准备frontmatter
              frontmatter.title = frontmatter.title || issue.title.replace(/^\[Post\]:\s*/, '').trim();
              frontmatter.date = frontmatter.date || new Date(issue.created_at).toISOString().split('T')[0];
              frontmatter.tags = frontmatter.tags || issue.labels.map(label => label.name).filter(name => name !== 'publish');
              frontmatter.draft = frontmatter.draft !== undefined ? frontmatter.draft : (issue.state === 'closed');
              frontmatter.issueNumber = issue.number;
              frontmatter.authors = frontmatter.authors || ['default'];
              
              // 如果没有摘要，尝试提取
              if (!frontmatter.summary) {
                const firstParagraph = content.split('\n\n')[0]
                  .replace(/^#.*\n+/, '')
                  .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1')
                  .replace(/[*_~`]/g, '')
                  .trim();
                
                frontmatter.summary = firstParagraph.length > 160 
                  ? firstParagraph.substring(0, 157) + '...' 
                  : firstParagraph;
              }
              
              // 添加frontmatter到内容
              const frontmatterYaml = yaml.dump(frontmatter).trim();
              const mdxContent = `---\n${frontmatterYaml}\n---\n\n${content}`;
              
              return { 
                issueNumber,
                slug,
                title: frontmatter.title,
                content: mdxContent
              };
            } catch (error) {
              console.error(`Error processing issue #${issueNumber}:`, error);
              core.setFailed(`Failed to process issue #${issueNumber}`);
            }

      - name: Download issue images
        if: success()
        run: |
          # 创建目录
          mkdir -p public/static/images/issues/${{ env.ISSUE_NUMBER }}

          # 使用正则表达式从内容中提取图片链接并下载
          OUTPUT=$(echo '${{ steps.get-issue.outputs.result }}' | jq -r '.content')

          # 提取并下载GitHub用户上传的图片
          IMAGES=$(echo "$OUTPUT" | grep -o -E '!\[[^\]]*\]\(https://user-images\.githubusercontent\.com/[^)]+\)')

          for IMG in $IMAGES; do
            URL=$(echo $IMG | grep -o -E 'https://user-images\.githubusercontent\.com/[^)]+')
            FILENAME=$(basename $URL | cut -d '?' -f 1)
            echo "Downloading $URL to public/static/images/issues/${{ env.ISSUE_NUMBER }}/$FILENAME"
            curl -L "$URL" -o "public/static/images/issues/${{ env.ISSUE_NUMBER }}/$FILENAME"
            
            # 替换图片链接
            CONTENT=$(echo "$OUTPUT" | sed "s|$URL|/static/images/issues/${{ env.ISSUE_NUMBER }}/$FILENAME|g")
            OUTPUT="$CONTENT"
          done

      - name: Save MDX file
        run: |
          mkdir -p data/blog
          SLUG=$(echo '${{ steps.get-issue.outputs.result }}' | jq -r '.slug')
          CONTENT=$(echo '${{ steps.get-issue.outputs.result }}' | jq -r '.content')
          echo "$CONTENT" > data/blog/$SLUG.mdx
          echo "Created file: data/blog/$SLUG.mdx"

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add data/blog
          git add public/static/images/issues || true

          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          git commit -m "Blog post from issue #${{ env.ISSUE_NUMBER }}: ${{ env.ISSUE_TITLE }}"
          git push

      - name: Add comment to Issue
        if: success()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const result = JSON.parse('${{ steps.get-issue.outputs.result }}');

            // 从siteMetadata中获取网站URL
            let siteUrl = 'https://your-site.com';
            try {
              const siteMetadataPath = path.join(process.cwd(), 'data', 'siteMetadata.js');
              const siteMetadataContent = fs.readFileSync(siteMetadataPath, 'utf8');
              const siteUrlMatch = siteMetadataContent.match(/siteUrl:\s*['"]([^'"]+)['"]/);
              if (siteUrlMatch && siteUrlMatch[1]) {
                siteUrl = siteUrlMatch[1];
              }
            } catch (error) {
              console.error('Error reading siteMetadata.js:', error);
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ env.ISSUE_NUMBER }},
              body: `✅ 博客文章已成功创建！\n\n`+
                    `文章将在构建完成后可在以下链接访问:\n`+
                    `${siteUrl}/blog/${result.slug}`
            });

      - name: Trigger Vercel Deployment
        env:
          VERCEL_DEPLOY_HOOK_URL: ${{ secrets.VERCEL_DEPLOY_HOOK_URL }}
        if: success() && env.VERCEL_DEPLOY_HOOK_URL != ''
        run: |
          echo "Triggering Vercel deployment..."
          curl -X POST ${{ secrets.VERCEL_DEPLOY_HOOK_URL }}
